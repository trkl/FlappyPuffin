{"ast":null,"code":"import _classCallCheck from \"/Users/torkildjurhuus/Code/FlappyPuffin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torkildjurhuus/Code/FlappyPuffin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/torkildjurhuus/Code/FlappyPuffin/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/torkildjurhuus/Code/FlappyPuffin/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/torkildjurhuus/Code/FlappyPuffin/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/torkildjurhuus/Code/FlappyPuffin/src/Resources/Games/FlappyBird/GameComponents/Pipes.js\";\nimport React from \"react\";\nimport GameComponent from \"../../../../GameObject/GameComponent\";\nimport Vector from \"../../../../Vector/Vector\";\nimport CollisionZone from \"../../../../GameObject/CollisionZone\";\nimport Sprite from \"../../../../GameComponents/Sprite\";\nimport PropTypes from \"prop-types\";\nimport Game from \"../Game\";\nimport { WithWorld } from \"../../../../World/HOC/WithWorld\";\nimport EventManager from \"../../../../EventManager/EventManager\";\n\nvar Pipes =\n/*#__PURE__*/\nfunction (_GameComponent) {\n  _inherits(Pipes, _GameComponent);\n\n  function Pipes(props) {\n    var _this;\n\n    _classCallCheck(this, Pipes);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pipes).call(this, props));\n\n    _this.handleCollision = function (collider) {\n      var object = collider.object,\n          collisionZone = collider.collisionZone;\n      if (object.name !== \"Bird\") return;\n\n      if (collisionZone.name === \"scoreZone\") {\n        ++Game.instance.score;\n        EventManager.instance.registerEvent({\n          audio: {\n            soundName: \"sfx_point.wav\"\n          }\n        });\n      } else {\n        EventManager.instance.registerEvent({\n          audio: {\n            soundName: \"sfx_die.wav\"\n          }\n        });\n        Game.instance.gameOver = true;\n\n        if (Game.instance.score > Game.instance.highScore) {\n          Game.instance.highScore = Game.instance.score;\n        }\n      }\n    };\n\n    for (var i in _this.props) {\n      _this[i] = _this.props[i];\n    }\n\n    var upperPipeOffset = 0;\n    var upperPipeSize = _this.upperPipeLength ? _this.upperPipeLength : 20;\n    var gap = _this.gap ? _this.gap : 20;\n    var lowerPipeSize = 100 - upperPipeSize + gap;\n    var lowerPipeOffset = upperPipeOffset + upperPipeSize + gap;\n    _this.children = [React.createElement(Sprite, {\n      offset: new Vector([_this.offset, upperPipeOffset]),\n      size: new Vector([_this.width, upperPipeSize]),\n      imagesource: \"pipeDown.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }), React.createElement(CollisionZone, {\n      offset: new Vector([_this.offset, upperPipeOffset]),\n      dimensions: new Vector([_this.width, upperPipeSize]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(Sprite, {\n      offset: new Vector([_this.offset, lowerPipeOffset]),\n      size: new Vector([_this.width, 70]),\n      imagesource: \"pipeUp.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(CollisionZone, {\n      offset: new Vector([_this.offset, lowerPipeOffset]),\n      dimensions: new Vector([_this.width, lowerPipeSize]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(CollisionZone, {\n      name: \"scoreZone\",\n      offset: new Vector([_this.offset + _this.width, upperPipeSize]),\n      dimensions: new Vector([_this.width, gap]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })];\n    return _this;\n  }\n\n  _createClass(Pipes, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      for (var i in props) {\n        this[i] = props[i];\n      }\n    }\n  }]);\n\n  return Pipes;\n}(GameComponent);\n\nPipes.propTypes = {\n  width: PropTypes.number,\n  position: PropTypes.instanceOf(Vector)\n};\nPipes.defaultProps = {\n  width: 4,\n  position: new Vector()\n};\nexport default WithWorld(Pipes);","map":{"version":3,"sources":["/Users/torkildjurhuus/Code/FlappyPuffin/src/Resources/Games/FlappyBird/GameComponents/Pipes.js"],"names":["React","GameComponent","Vector","CollisionZone","Sprite","PropTypes","Game","WithWorld","EventManager","Pipes","props","handleCollision","collider","object","collisionZone","name","instance","score","registerEvent","audio","soundName","gameOver","highScore","i","upperPipeOffset","upperPipeSize","upperPipeLength","gap","lowerPipeSize","lowerPipeOffset","children","offset","width","propTypes","number","position","instanceOf","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GameComponent from \"../../../../GameObject/GameComponent\";\nimport Vector from \"../../../../Vector/Vector\";\nimport CollisionZone from \"../../../../GameObject/CollisionZone\";\nimport Sprite from \"../../../../GameComponents/Sprite\";\nimport PropTypes from \"prop-types\";\nimport Game from \"../Game\";\nimport { WithWorld } from \"../../../../World/HOC/WithWorld\";\nimport EventManager from \"../../../../EventManager/EventManager\";\n\nclass Pipes extends GameComponent {\n  constructor(props) {\n    super(props);\n    for (const i in this.props) {\n      this[i] = this.props[i];\n    }\n    const upperPipeOffset = 0;\n    const upperPipeSize = this.upperPipeLength ? this.upperPipeLength : 20;\n    const gap = this.gap ? this.gap : 20;\n    const lowerPipeSize = 100 - upperPipeSize + gap;\n    const lowerPipeOffset = upperPipeOffset + upperPipeSize + gap;\n\n    this.children = [\n      <Sprite\n        offset={new Vector([this.offset, upperPipeOffset])}\n        size={new Vector([this.width, upperPipeSize])}\n        imagesource=\"pipeDown.png\"\n      />,\n      <CollisionZone\n        offset={new Vector([this.offset, upperPipeOffset])}\n        dimensions={new Vector([this.width, upperPipeSize])}\n      />,\n      <Sprite\n        offset={new Vector([this.offset, lowerPipeOffset])}\n        size={new Vector([this.width, 70])}\n        imagesource=\"pipeUp.png\"\n      />,\n\n      <CollisionZone\n        offset={new Vector([this.offset, lowerPipeOffset])}\n        dimensions={new Vector([this.width, lowerPipeSize])}\n      />,\n      <CollisionZone\n        name=\"scoreZone\"\n        offset={new Vector([this.offset + this.width, upperPipeSize])}\n        dimensions={new Vector([this.width, gap])}\n      />\n    ];\n  }\n\n  componentWillReceiveProps(props) {\n    for (const i in props) {\n      this[i] = props[i];\n    }\n  }\n\n  handleCollision = collider => {\n    const { object, collisionZone } = collider;\n    if (object.name !== \"Bird\") return;\n\n    if (collisionZone.name === \"scoreZone\") {\n      ++Game.instance.score;\n      EventManager.instance.registerEvent({\n        audio: { soundName: \"sfx_point.wav\" }\n      });\n    } else {\n      EventManager.instance.registerEvent({\n        audio: { soundName: \"sfx_die.wav\" }\n      });\n      Game.instance.gameOver = true;\n      if (Game.instance.score > Game.instance.highScore) {\n        Game.instance.highScore = Game.instance.score;\n      }\n    }\n  };\n}\n\nPipes.propTypes = {\n  width: PropTypes.number,\n  position: PropTypes.instanceOf(Vector)\n};\nPipes.defaultProps = {\n  width: 4,\n  position: new Vector()\n};\n\nexport default WithWorld(Pipes);\n"]},"metadata":{},"sourceType":"module"}