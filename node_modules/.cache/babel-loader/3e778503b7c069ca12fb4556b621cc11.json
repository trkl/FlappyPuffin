{"ast":null,"code":"import _classCallCheck from \"/Users/torkildjurhuus/Code/FlappyPuffin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torkildjurhuus/Code/FlappyPuffin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/torkildjurhuus/Code/FlappyPuffin/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/torkildjurhuus/Code/FlappyPuffin/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/torkildjurhuus/Code/FlappyPuffin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/torkildjurhuus/Code/FlappyPuffin/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from \"react\";\nimport GameComponent from \"../../../../GameObject/GameComponent\";\nimport Pipes from \"./Pipes\";\nimport Vector from \"../../../../Vector/Vector\";\nimport PropTypes from \"prop-types\";\nimport { WithWorld } from \"../../../../World/HOC/WithWorld\";\n\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nvar PipePool =\n/*#__PURE__*/\nfunction (_GameComponent) {\n  _inherits(PipePool, _GameComponent);\n\n  function PipePool(props) {\n    var _this;\n\n    _classCallCheck(this, PipePool);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PipePool).call(this, props));\n\n    _this.prepareForRender = function () {\n      console.log(\"preparing\");\n\n      while (_this.children.length < 7) {\n        _this.children.push(React.createElement(Pipes, {\n          offset: _this.pipeKey++ * _this.interval,\n          position: _this.position,\n          upperPipeLength: getRandomArbitrary(10, 50),\n          key: _this.pipeKey\n        }));\n      }\n    };\n\n    _this.shouldComponentUpdate = function () {\n      return true;\n    };\n\n    _this.rotateRender = function () {\n      _this.children.push(React.cloneElement(_this.children.shift(), {\n        position: _this.position,\n        offset: _this.pipeKey++ * _this.interval,\n        upperPipeLength: getRandomArbitrary(10, 50),\n        key: _this.pipeKey\n      }));\n\n      console.log(\"after\", _this.children);\n    };\n\n    _this.beforeFrameRender = function () {\n      var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),\n          position = _assertThisInitialize.position;\n\n      if (position.x + _this.interval * (_this.pipeKey - 1) < 100) {\n        console.log(\"hey\");\n\n        _this.rotateRender();\n      }\n    };\n\n    for (var i in _this.props) {\n      _this[i] = _this.props[i];\n    }\n\n    console.log(_this.position.vector);\n    _this.interval = 20;\n    _this.children = [];\n    _this.pipeKey = 0;\n\n    _this.prepareForRender();\n\n    return _this;\n  }\n\n  _createClass(PipePool, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      for (var i in props) {\n        this[i] = this.props[i];\n      }\n    }\n  }]);\n\n  return PipePool;\n}(GameComponent);\n\nPipePool.propTypes = {\n  position: PropTypes.instanceOf(Vector).isRequired\n};\nPipePool.defaultProps = {\n  position: Vector.Zero\n};\nexport default WithWorld(PipePool);","map":{"version":3,"sources":["/Users/torkildjurhuus/Code/FlappyPuffin/src/Resources/Games/FlappyBird/GameComponents/PipePool.js"],"names":["React","GameComponent","Pipes","Vector","PropTypes","WithWorld","getRandomArbitrary","min","max","Math","random","PipePool","props","prepareForRender","console","log","children","length","push","createElement","offset","pipeKey","interval","position","upperPipeLength","key","shouldComponentUpdate","rotateRender","cloneElement","shift","beforeFrameRender","x","i","vector","propTypes","instanceOf","isRequired","defaultProps","Zero"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport GameComponent from \"../../../../GameObject/GameComponent\";\nimport Pipes from \"./Pipes\";\nimport Vector from \"../../../../Vector/Vector\";\nimport PropTypes from \"prop-types\";\nimport { WithWorld } from \"../../../../World/HOC/WithWorld\";\n\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nclass PipePool extends GameComponent {\n  constructor(props) {\n    super(props);\n    for (const i in this.props) {\n      this[i] = this.props[i];\n    }\n    console.log(this.position.vector);\n    this.interval = 20;\n    this.children = [];\n    this.pipeKey = 0;\n\n    this.prepareForRender();\n  }\n\n  prepareForRender = () => {\n    console.log(\"preparing\");\n    while (this.children.length < 7) {\n      this.children.push(\n        React.createElement(Pipes, {\n          offset: this.pipeKey++ * this.interval,\n          position: this.position,\n          upperPipeLength: getRandomArbitrary(10, 50),\n          key: this.pipeKey\n        })\n      );\n    }\n  };\n\n  shouldComponentUpdate = () => true;\n\n  rotateRender = () => {\n    this.children.push(\n      React.cloneElement(this.children.shift(), {\n        position: this.position,\n        offset: this.pipeKey++ * this.interval,\n        upperPipeLength: getRandomArbitrary(10, 50),\n        key: this.pipeKey\n      })\n    );\n    console.log(\"after\", this.children);\n  };\n\n  componentWillReceiveProps(props) {\n    for (const i in props) {\n      this[i] = this.props[i];\n    }\n  }\n\n  beforeFrameRender = () => {\n    const { position } = this;\n    if (position.x + this.interval * (this.pipeKey - 1) < 100) {\n      console.log(\"hey\");\n      this.rotateRender();\n    }\n  };\n}\n\nPipePool.propTypes = {\n  position: PropTypes.instanceOf(Vector).isRequired\n};\n\nPipePool.defaultProps = {\n  position: Vector.Zero\n};\n\nexport default WithWorld(PipePool);\n"]},"metadata":{},"sourceType":"module"}